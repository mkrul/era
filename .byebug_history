exit
ContactUsMailer.contact_us
ContactUsMailer.contact_us.new
ContactUsMailer.contact_us.new()
ContactUsMailer.contact_us.new().template
ContactUsMailer.contact_us.template
ContactUsMailer.contact_us
ContactUsMailer.template
ContactUsMailer
mail.template
mail.body
mail.message
mail
mail.body.to_s
mail.body
mail.subject
mail.to
exit
ActionMailer::Base.deliveries.last.to
ActionMailer::Base.deliveries.last
ActionMailer::Base.deliveries
exit
ActionDispatch::Integration::Session.reset!
ActionMailer::Base.deliveries[1]
ActionMailer::Base.deliveries[0]
pp ActionMailer::Base.deliveries
ActionMailer::Base.deliveries
exit
500 % 500
500 / 500
500
emails
exit
org.email
exit
org[0]
org
exit
data[0].email
data.email
data[0]
data
JSON.parse(data).to_json
data
exit
shelter_pages.last['total_pages']
shelter_pages.last
shelter_pages
shelter_pages['total_pages"]
shelter_pages = JSON.parse(client.organizations(limit: 10).to_json)
shelter_pages = client.organizations(limit: 10).to_json
shelter_pages = client.organizations(limit: 10)
client.organizations(limit: 10)
client.organizations(limit: 100)
client.organizations(limit: 100, page: 141)
client.organizations(limit: 100, page: 2)
client.organizations(limit: 100)
shelter_pages
shelter_pages.count
exit
emails.count
emails
exit
emails.uniq
emails
exit
data&.dig('id')
data
data.dig('id')
data['id'].blank? || !data.is_a?(Hash)
data.is_a?(Hash)
data
e
exit
data
data.is_a? Hash
data
data["count_per_page"]
data.dig('id')
data['id']
data
emails
exit
organization
id
emails
exit
organization.email
organization
next
exit
page[0]
page
exit
page[index]['email']
page[index]
shelter
exit
page[index]
index
exit
page
index
exit
['a', 'a', 'b', 'c'].uniq
shelter_pages[0][0]
shelter_pages[0]
shelter_pages = JSON.parse(client.organizations.to_json)
pp s[2]['email']
pp s[0]['email']
pp s[0]
pp s
p s
s['email']
s = shelters[0]
shelters[0]
shelters = JSON.parse(client.organizations.to_json)
data = JSON.parse(client.organizations.to_json)
data = client.organizations.to_json
data = client.organizations.to_json.to_hash
data = client.organizations.to_json.to_h
data = client.organizations.to_json
JSON.parse(data)
data = client.organizations.to_json
client.organizations.to_json
.to_json
client.organizations.where(City: 'Chicago')
client.organizations.where(City: 'Chino Hills')
client.organizations.where(email: '')
client.organizations.where
client
Petfinder::Client.new(
      'M8gZNDfg8CH2pIOl83caEpmSTzVuCfqefaUfoJiDBk0tWY5Bh1',
      'vQoLl80w7Fjw6MOaxivtxdG85yBo7JxB5SUmjRqt'
    )
client
exit
reload!
o.name
o
o.country
o = client.organizations.first
client.organizations.first
client.organizations.last
client.organizations.to_h
client.organizations.to_hash
client.organizations
client
JSON.parse(client.organizations)
JSON.parse
JSON
client.organizations.first
client.organizations
client
exit
client
shelters = client.organizations
shelters
shelter.to_h
shelter.to_hash
shelter
exit
token
request
res
exit
javascript_include_tag :our_values
exit
javascript_include_tag :our_values
exit
next
collector
next
self
self.class._view_paths
self.class
self
step
templates_name
next
action_name
headers[:template_name]
headers
step
next
step
next
step
exit
next
templates_name
next
headers[:template_path]
step
next
step
next
step
exit
self.class.mailer_name
headers[:template_path]
headers
step
next
headers[:body]
next
block_given?
block_givem?
headers
step
next
step
exit
exception
next
previous_renderer
next
headers
next
headers
step
exit
headers
next
headers
message
step
next
whereami
*args
args
step
next
step
exit
exception
next
headers
next
headers
step
exit
headers
next
headers
step
exit
next
params
exit
params.permit(:name, :email, :message)
exit
contact_params[:message]
contact_params[:email]
]
contact_params
